Index: src/main/java/weka/attributeSelection/AttributeSelection.java
===================================================================
--- src/main/java/weka/attributeSelection/AttributeSelection.java	(revision 9272)
+++ src/main/java/weka/attributeSelection/AttributeSelection.java	(working copy)
@@ -570,11 +570,11 @@
 
     if (m_ASEvaluator instanceof AttributeEvaluator &&
 	!(m_searchMethod instanceof Ranker)) {
-            System.err.println("AttributeEvaluators must use a Ranker search "
-      			 +"method. Switching to Ranker...");
-            m_searchMethod = new Ranker();
-      // throw new Exception("AttributeEvaluators must use the Ranker search " 
-	//		  + "method");
+      //      System.err.println("AttributeEvaluators must use a Ranker search "
+      //			 +"method. Switching to Ranker...");
+      //      m_searchMethod = new Ranker();
+      throw new Exception("AttributeEvaluators must use the Ranker search "
+			  + "method");
     }
 
     if (m_searchMethod instanceof RankedOutputSearch) {
diff -uNr trunk/weka/src/main/java/weka/attributeSelection/BestFirst.java /home/chris/src/autoweka/weka/src/main/java/weka/attributeSelection/BestFirst.java
--- src/main/java/weka/attributeSelection/BestFirst.java	2013-05-14 14:00:53.843247804 -0700
+++ src/main/java/weka/attributeSelection/BestFirst.java	2013-02-08 19:08:38.000000000 -0800
@@ -871,6 +871,8 @@
       if (!added) {
 	stale++;
       }
+      if(Thread.interrupted())
+          break;
     }
 
     m_bestMerit = best_merit;
diff -uNr trunk/weka/src/main/java/weka/attributeSelection/GreedyStepwise.java /home/chris/src/autoweka/weka/src/main/java/weka/attributeSelection/GreedyStepwise.java
--- src/main/java/weka/attributeSelection/GreedyStepwise.java	2013-05-14 14:00:53.843247804 -0700
+++ src/main/java/weka/attributeSelection/GreedyStepwise.java	2013-02-08 19:12:07.000000000 -0800
@@ -712,6 +712,8 @@
 	m_rankedAtts[m_rankedSoFar][1] = best_merit;
 	m_rankedSoFar++;
       }
+      if(Thread.interrupted())
+         break;
     }
     m_bestMerit = best_merit;
     return attributeList(m_best_group);
diff -uNr trunk/weka/src/main/java/weka/classifiers/Evaluation.java /home/chris/src/autoweka/weka/src/main/java/weka/classifiers/Evaluation.java
--- src/main/java/weka/classifiers/Evaluation.java	2013-05-14 14:00:52.529914394 -0700
+++ src/main/java/weka/classifiers/Evaluation.java	2013-03-13 16:24:17.000000000 -0700
@@ -1649,6 +1649,8 @@
 
         if (classificationOutput != null)
           classificationOutput.printClassification(p, data.instance(i), i);
+        if(Thread.interrupted())
+          break;
       }
     } else {
       // Need to be able to collect predictions if appropriate (for AUC)
@@ -1659,6 +1661,8 @@
         if (classificationOutput != null)
           classificationOutput.printClassification(classifier,
               data.instance(i), i);
+        if(Thread.interrupted())
+          break;
       }
     }
 
@@ -2514,6 +2518,7 @@
     }
 
     text.append(title + "\n");
+    
     try {
       if (m_WithClass > 0) {
         if (m_ClassIsNominal) {
diff -uNr trunk/weka/src/main/java/weka/classifiers/bayes/net/search/global/GeneticSearch.java /home/chris/src/autoweka/weka/src/main/java/weka/classifiers/bayes/net/search/global/GeneticSearch.java
--- src/main/java/weka/classifiers/bayes/net/search/global/GeneticSearch.java	2013-05-14 14:00:52.273247713 -0700
+++ src/main/java/weka/classifiers/bayes/net/search/global/GeneticSearch.java	2012-11-29 17:05:28.000000000 -0800
@@ -405,6 +405,8 @@
 				population[i] = descendantPopulation[iSelected];
 				bSelected[iSelected] = true;
 			}
+            if(Thread.interrupted())
+                break;
         }
         
         // restore current network to best network
diff -uNr trunk/weka/src/main/java/weka/classifiers/bayes/net/search/global/HillClimber.java /home/chris/src/autoweka/weka/src/main/java/weka/classifiers/bayes/net/search/global/HillClimber.java
--- src/main/java/weka/classifiers/bayes/net/search/global/HillClimber.java	2013-05-14 14:00:52.273247713 -0700
+++ src/main/java/weka/classifiers/bayes/net/search/global/HillClimber.java	2012-11-29 17:05:28.000000000 -0800
@@ -157,6 +157,8 @@
 			performOperation(bayesNet, instances, oOperation);
 			fScore = oOperation.m_fScore;
 			oOperation = getOptimalOperation(bayesNet, instances);
+            if(Thread.interrupted())
+                break;
         }        
     } // search
 
diff -uNr trunk/weka/src/main/java/weka/classifiers/bayes/net/search/global/K2.java /home/chris/src/autoweka/weka/src/main/java/weka/classifiers/bayes/net/search/global/K2.java
--- src/main/java/weka/classifiers/bayes/net/search/global/K2.java	2013-05-14 14:00:52.276581046 -0700
+++ src/main/java/weka/classifiers/bayes/net/search/global/K2.java	2012-11-29 17:04:34.000000000 -0800
@@ -210,7 +210,11 @@
 				} else {
 					bProgress = false;
 				}
+                if(Thread.interrupted())
+                    break;
 			}
+            if(Thread.interrupted())
+                break;
 		}
 	} // search 
 
diff -uNr trunk/weka/src/main/java/weka/classifiers/bayes/net/search/global/RepeatedHillClimber.java /home/chris/src/autoweka/weka/src/main/java/weka/classifiers/bayes/net/search/global/RepeatedHillClimber.java
--- src/main/java/weka/classifiers/bayes/net/search/global/RepeatedHillClimber.java	2013-05-14 14:00:52.273247713 -0700
+++ src/main/java/weka/classifiers/bayes/net/search/global/RepeatedHillClimber.java	2012-11-29 17:04:48.000000000 -0800
@@ -129,6 +129,8 @@
 				fBestScore = fCurrentScore;
 				copyParentSets(bestBayesNet, bayesNet);
 			}
+            if(Thread.interrupted())
+                break;
         }
         
         // restore current network to best network
diff -uNr trunk/weka/src/main/java/weka/classifiers/bayes/net/search/global/SimulatedAnnealing.java /home/chris/src/autoweka/weka/src/main/java/weka/classifiers/bayes/net/search/global/SimulatedAnnealing.java
--- src/main/java/weka/classifiers/bayes/net/search/global/SimulatedAnnealing.java	2013-05-14 14:00:52.273247713 -0700
+++ src/main/java/weka/classifiers/bayes/net/search/global/SimulatedAnnealing.java	2012-11-29 17:05:07.000000000 -0800
@@ -195,11 +195,15 @@
                         }
 	                }
 	            }
+                if(Thread.interrupted())
+                    break;
             }
 			if (fCurrentScore > fBestScore) {
 				copyParentSets(bestBayesNet, bayesNet);				
 			}
             fTemp = fTemp * m_fDelta;
+            if(Thread.interrupted())
+                break;
         }
 
 		copyParentSets(bayesNet, bestBayesNet);
diff -uNr trunk/weka/src/main/java/weka/classifiers/bayes/net/search/global/TabuSearch.java /home/chris/src/autoweka/weka/src/main/java/weka/classifiers/bayes/net/search/global/TabuSearch.java
--- src/main/java/weka/classifiers/bayes/net/search/global/TabuSearch.java	2013-05-14 14:00:52.273247713 -0700
+++ src/main/java/weka/classifiers/bayes/net/search/global/TabuSearch.java	2012-11-29 17:05:20.000000000 -0800
@@ -187,6 +187,8 @@
 			if (bayesNet.getDebug()) {
 				printTabuList();
 			}
+            if(Thread.interrupted())
+                break;
         }
         
         // restore current network to best network
diff -uNr trunk/weka/src/main/java/weka/classifiers/bayes/net/search/local/GeneticSearch.java /home/chris/src/autoweka/weka/src/main/java/weka/classifiers/bayes/net/search/local/GeneticSearch.java
--- src/main/java/weka/classifiers/bayes/net/search/local/GeneticSearch.java	2013-05-14 14:00:52.356581050 -0700
+++ src/main/java/weka/classifiers/bayes/net/search/local/GeneticSearch.java	2012-11-29 13:55:29.000000000 -0800
@@ -404,6 +404,8 @@
 				population[i] = descendantPopulation[iSelected];
 				bSelected[iSelected] = true;
 			}
+            if(Thread.interrupted())
+                break;
         }
         
         // restore current network to best network
diff -uNr trunk/weka/src/main/java/weka/classifiers/bayes/net/search/local/HillClimber.java /home/chris/src/autoweka/weka/src/main/java/weka/classifiers/bayes/net/search/local/HillClimber.java
--- src/main/java/weka/classifiers/bayes/net/search/local/HillClimber.java	2013-05-14 14:00:52.356581050 -0700
+++ src/main/java/weka/classifiers/bayes/net/search/local/HillClimber.java	2012-11-29 13:56:23.000000000 -0800
@@ -217,6 +217,8 @@
 		while ((oOperation != null) && (oOperation.m_fDeltaScore > 0)) {
 			performOperation(bayesNet, instances, oOperation);
 			oOperation = getOptimalOperation(bayesNet, instances);
+            if(Thread.interrupted())
+                break;
         }
         
 		// free up memory
diff -uNr trunk/weka/src/main/java/weka/classifiers/bayes/net/search/local/K2.java /home/chris/src/autoweka/weka/src/main/java/weka/classifiers/bayes/net/search/local/K2.java
--- src/main/java/weka/classifiers/bayes/net/search/local/K2.java	2013-05-14 14:00:52.356581050 -0700
+++ src/main/java/weka/classifiers/bayes/net/search/local/K2.java	2012-11-29 18:16:35.000000000 -0800
@@ -192,7 +192,6 @@
 		for (int iOrder = 1; iOrder < instances.numAttributes(); iOrder++) {
 			int iAttribute = nOrder[iOrder];
 			double fBestScore = fBaseScores[iAttribute];
-
 			boolean bProgress = (bayesNet.getParentSet(iAttribute).getNrOfParents() < getMaxNrOfParents());
 			while (bProgress) {
 				int nBestAttribute = -1;
@@ -211,7 +210,11 @@
 				} else {
 					bProgress = false;
 				}
+                if(Thread.interrupted())
+                    break;
 			}
+            if(Thread.interrupted())
+                break;
 		}
 	} // buildStructure 
 
diff -uNr trunk/weka/src/main/java/weka/classifiers/bayes/net/search/local/LAGDHillClimber.java /home/chris/src/autoweka/weka/src/main/java/weka/classifiers/bayes/net/search/local/LAGDHillClimber.java
--- src/main/java/weka/classifiers/bayes/net/search/local/LAGDHillClimber.java	2013-05-14 14:00:52.356581050 -0700
+++ src/main/java/weka/classifiers/bayes/net/search/local/LAGDHillClimber.java	2012-11-29 16:05:54.000000000 -0800
@@ -139,9 +139,15 @@
 
                   }
                   System.out.println("DeltaScore: "+sequenceDeltaScore);
+                  if(Thread.interrupted())
+                     break;
                }
+               if(Thread.interrupted())
+                  break;
             }
             --nrOfLookAheadSteps;
+            if(Thread.interrupted())
+                break;
          }
 
          /** last steps with greedy HC **/          
diff -uNr trunk/weka/src/main/java/weka/classifiers/bayes/net/search/local/RepeatedHillClimber.java /home/chris/src/autoweka/weka/src/main/java/weka/classifiers/bayes/net/search/local/RepeatedHillClimber.java
--- src/main/java/weka/classifiers/bayes/net/search/local/RepeatedHillClimber.java	2013-05-14 14:00:52.353247717 -0700
+++ src/main/java/weka/classifiers/bayes/net/search/local/RepeatedHillClimber.java	2012-11-29 16:11:04.000000000 -0800
@@ -130,7 +130,9 @@
 			if (fCurrentScore > fBestScore) {
 				fBestScore = fCurrentScore;
 				copyParentSets(bestBayesNet, bayesNet);
-			}
+			} 
+            if(Thread.interrupted())
+                break;
         }
         
         // restore current network to best network
diff -uNr trunk/weka/src/main/java/weka/classifiers/bayes/net/search/local/SimulatedAnnealing.java /home/chris/src/autoweka/weka/src/main/java/weka/classifiers/bayes/net/search/local/SimulatedAnnealing.java
--- src/main/java/weka/classifiers/bayes/net/search/local/SimulatedAnnealing.java	2013-05-14 14:00:52.356581050 -0700
+++ src/main/java/weka/classifiers/bayes/net/search/local/SimulatedAnnealing.java	2012-11-29 16:12:14.000000000 -0800
@@ -198,11 +198,15 @@
                         }
 	                }
 	            }
+                if(Thread.interrupted())
+                    break;
             }
 			if (fCurrentScore > fBestScore) {
 				copyParentSets(bestBayesNet, bayesNet);				
 			}
             fTemp = fTemp * m_fDelta;
+            if(Thread.interrupted())
+                break;
         }
 
 		copyParentSets(bayesNet, bestBayesNet);
diff -uNr trunk/weka/src/main/java/weka/classifiers/bayes/net/search/local/TabuSearch.java /home/chris/src/autoweka/weka/src/main/java/weka/classifiers/bayes/net/search/local/TabuSearch.java
--- src/main/java/weka/classifiers/bayes/net/search/local/TabuSearch.java	2013-05-14 14:00:52.353247717 -0700
+++ src/main/java/weka/classifiers/bayes/net/search/local/TabuSearch.java	2012-11-29 16:13:06.000000000 -0800
@@ -187,6 +187,8 @@
 			if (bayesNet.getDebug()) {
 				printTabuList();
 			}
+            if(Thread.interrupted())
+                break;
         }
         
         // restore current network to best network
Index: src/main/java/weka/classifiers/functions/Logistic.java
===================================================================
--- src/main/java/weka/classifiers/functions/Logistic.java	(revision 9272)
+++ src/main/java/weka/classifiers/functions/Logistic.java	(working copy)
@@ -747,6 +747,8 @@
 	if (m_Debug)
 	  System.out.println("First set of iterations finished, not enough!");
 	x = opt.findArgmin(x, b);
+        if(Thread.interrupted())
+          break;
       }
       if (m_Debug)
 	System.out.println(" -------------<Converged>--------------");
Index: src/main/java/weka/classifiers/functions/MultilayerPerceptron.java
===================================================================
--- src/main/java/weka/classifiers/functions/MultilayerPerceptron.java	(revision 9272)
+++ src/main/java/weka/classifiers/functions/MultilayerPerceptron.java	(working copy)
@@ -2069,6 +2069,8 @@
 	m_instances = new Instances(m_instances, 0);
 	return;
       }
+      if(Thread.interrupted())
+        return;
     }
     if (m_gui) {
       m_win.dispose();
Index: src/main/java/weka/classifiers/functions/SGD.java
===================================================================
--- src/main/java/weka/classifiers/functions/SGD.java	(revision 9272)
+++ src/main/java/weka/classifiers/functions/SGD.java	(working copy)
@@ -587,6 +587,8 @@
       for (int i = 0; i < data.numInstances(); i++) {
         updateClassifier(data.instance(i), false);
       }
+      if(Thread.interrupted())
+        return;
     }
   }
   
Index: src/main/java/weka/classifiers/functions/SGDText.java
===================================================================
--- src/main/java/weka/classifiers/functions/SGDText.java	(revision 9272)
+++ src/main/java/weka/classifiers/functions/SGDText.java	(working copy)
@@ -1153,6 +1153,8 @@
           updateClassifier(data.instance(i), false);
         }
       }
+      if(Thread.interrupted())
+        return;
     }
   }
 
Index: src/main/java/weka/classifiers/functions/SMO.java
===================================================================
--- src/main/java/weka/classifiers/functions/SMO.java	(revision 9272)
+++ src/main/java/weka/classifiers/functions/SMO.java	(working copy)
@@ -570,6 +570,8 @@
 	} else if (numChanged == 0) {
 	  examineAll = true;
 	}
+        if(Thread.interrupted())
+          break;
       }
       
       // Set threshold
Index: src/main/java/weka/classifiers/functions/VotedPerceptron.java
===================================================================
--- src/main/java/weka/classifiers/functions/VotedPerceptron.java	(revision 9272)
+++ src/main/java/weka/classifiers/functions/VotedPerceptron.java	(working copy)
@@ -349,6 +349,8 @@
 	  }
 	}
       }
+      if(Thread.interrupted())
+        break;
     }
   }
 
Index: src/main/java/weka/classifiers/functions/supportVector/RegSMO.java
===================================================================
--- src/main/java/weka/classifiers/functions/supportVector/RegSMO.java	(revision 9272)
+++ src/main/java/weka/classifiers/functions/supportVector/RegSMO.java	(working copy)
@@ -850,6 +850,8 @@
       if (loopCounter == 2500) {
 	break;
       }
+      if(Thread.interrupted())
+        break;
     }
     //	endmain 
   }
Index: src/main/java/weka/classifiers/functions/supportVector/RegSMOImproved.java
===================================================================
--- src/main/java/weka/classifiers/functions/supportVector/RegSMOImproved.java	(revision 9272)
+++ src/main/java/weka/classifiers/functions/supportVector/RegSMOImproved.java	(working copy)
@@ -856,6 +856,8 @@
       } else if (nNumChanged == 0) {
 	bExamineAll = true;
       }
+      if(Thread.interrupted())
+        break;
     }
   }
   
@@ -922,6 +924,8 @@
       } else if (nNumChanged == 0) {
 	bExamineAll = true;
       }
+      if(Thread.interrupted())
+        break;
     }
   }
   
Index: src/main/java/weka/classifiers/lazy/kstar/KStarNominalAttribute.java
===================================================================
--- src/main/java/weka/classifiers/lazy/kstar/KStarNominalAttribute.java	(revision 9272)
+++ src/main/java/weka/classifiers/lazy/kstar/KStarNominalAttribute.java	(working copy)
@@ -198,8 +198,7 @@
   private double stopProbUsingEntropy() {
     String debug = "(KStarNominalAttribute.stopProbUsingEntropy)";
     if ( m_ClassType != Attribute.NOMINAL ) {
-      System.err.println("Error: "+debug+" attribute class must be nominal!");
-      System.exit(1);
+      throw new RuntimeException("Error: "+debug+" attribute class must be nominal!");
     }
     int itcount = 0;
     double stopProb;
Index: src/main/java/weka/classifiers/lazy/kstar/KStarNumericAttribute.java
===================================================================
--- src/main/java/weka/classifiers/lazy/kstar/KStarNumericAttribute.java	(revision 9272)
+++ src/main/java/weka/classifiers/lazy/kstar/KStarNumericAttribute.java	(working copy)
@@ -365,8 +365,7 @@
   private double scaleFactorUsingEntropy() {
     String debug = "(KStarNumericAttribute.scaleFactorUsingEntropy)";
     if ( m_ClassType != Attribute.NOMINAL ) {
-      System.err.println("Error: "+debug+" attribute class must be nominal!");
-      System.exit(1);
+      throw new RuntimeException("Error: "+debug+" attribute class must be nominal!");
     }
     int i,j, lowestcount = 0, count, itcount;
     double lowest = -1.0, nextlowest = -1.0;
Index: src/main/java/weka/classifiers/trees/j48/NBTreeSplit.java
===================================================================
--- src/main/java/weka/classifiers/trees/j48/NBTreeSplit.java	(revision 9272)
+++ src/main/java/weka/classifiers/trees/j48/NBTreeSplit.java	(working copy)
@@ -162,7 +162,7 @@
 	    ex.printStackTrace();
 	    System.err.println("*** "+m_complexityIndex);
 	    System.err.println(weights.length);
-	    System.exit(1);
+           throw new RuntimeException(ex);
 	  }
 	}
       }
Index: src/main/java/weka/classifiers/trees/lmt/LMTNode.java
===================================================================
--- src/main/java/weka/classifiers/trees/lmt/LMTNode.java	(revision 9272)
+++ src/main/java/weka/classifiers/trees/lmt/LMTNode.java	(working copy)
@@ -312,7 +312,7 @@
 	    grow = false;
 	}
 	
-	if (grow) {	
+	if (grow && !Thread.interrupted()) {	
 	    //create and build children of node
 	    m_isLeaf = false;	    	    
 	    Instances[] localInstances = m_localModel.split(m_train);	    
Index: src/main/java/weka/core/ConjugateGradientOptimization.java
===================================================================
--- src/main/java/weka/core/ConjugateGradientOptimization.java	(revision 9272)
+++ src/main/java/weka/core/ConjugateGradientOptimization.java	(working copy)
@@ -204,6 +204,10 @@
       for (int i = 0; i < direct.length; i++) {          
         direct[i] = -grad[i] + Math.max(0, Math.min(betaHS, betaDY)) * direct[i];
       }
+      if (Thread.interrupted()) {
+        finished = true;
+        break;
+      }
     }
       
     if (finished) {
Index: src/main/java/weka/core/Optimization.java
===================================================================
--- src/main/java/weka/core/Optimization.java	(revision 9272)
+++ src/main/java/weka/core/Optimization.java	(working copy)
@@ -1000,6 +1000,9 @@
 			if((hessian==null) && (toFree != null) && toFree.equal(oldToFree)) 
 			    finish = true;           
 		    }
+
+                   if(Thread.interrupted())
+                     finish = true;
 		    
 		    if(finish){// Min. found
 			if (m_Debug)
Index: src/main/java/weka/core/WekaPackageManager.java
===================================================================
--- src/main/java/weka/core/WekaPackageManager.java	(revision 9272)
+++ src/main/java/weka/core/WekaPackageManager.java	(working copy)
@@ -72,7 +72,7 @@
  */
 public class WekaPackageManager {
 
-  private static String WEKAFILES_DIR_NAME = "wekafiles";
+  private static String WEKAFILES_DIR_NAME = ".wekafiles";
   public static File WEKA_HOME = new File(System.getProperty("user.home")
       + File.separator + WEKAFILES_DIR_NAME);
   public static File PACKAGES_DIR = new File(System.getProperty("user.home")
Index: src/main/java/weka/filters/supervised/instance/Resample.java
===================================================================
--- src/main/java/weka/filters/supervised/instance/Resample.java	(revision 9272)
+++ src/main/java/weka/filters/supervised/instance/Resample.java	(working copy)
@@ -542,42 +542,55 @@
 	indices[i].add(n);
     }
 
+    int s = 0;
+    for(int i = 0; i < classIndices.length - 1; i++)
+        s += indices[i].size();
+
     // draw X samples
     int currentSize = origSize;
+    int lastSize = -1;
     for (int i = 0; i < sampleSize; i++) {
       int index = 0;
       if (random.nextDouble() < m_BiasToUniformClass) {
 	// Pick a random class (of those classes that actually appear)
 	int cIndex = random.nextInt(actualClasses);
+        boolean picked = false;
 	for (int j = 0, k = 0; j < classIndices.length - 1; j++) {
 	  if ((classIndices[j] != classIndices[j + 1]) && (k++ >= cIndex)) {
 	    // no more indices for this class left, try again
 	    if (indices[j].size() == 0) {
-	      i--;
 	      break;
 	    }
 	    // Pick a random instance of the designated class
 	    index = random.nextInt(indices[j].size());
 	    indicesNew[j].add(indices[j].get(index));
 	    indices[j].remove(index);
+            picked = true;
 	    break;
 	  }
 	}
+        if(!picked)
+          i--;
       }
       else {
 	index = random.nextInt(currentSize);
-	for (int n = 0; n < actualClasses; n++) {
+        boolean picked = false;
+	for (int n = 0; n < classIndices.length; n++) {
 	  if (index < indices[n].size()) {
 	    indicesNew[n].add(indices[n].get(index));
 	    indices[n].remove(index);
+            picked = true;
+            currentSize--;
 	    break;
 	  }
 	  else {
 	    index -= indices[n].size();
 	  }
 	}
-	currentSize--;
+        if (!picked)
+          i--;
       }
+      lastSize = currentSize;
     }
